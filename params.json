{"name":"Gviz","tagline":"Yet Another Ruby's interface of graphviz","body":"# Gviz\r\n\r\n[![Build Status](https://travis-ci.org/melborne/Gviz.png?branch=master)](https://travis-ci.org/melborne/Gviz)\r\n\r\nRuby's interface of graphviz. It generate a dot file with simple ruby's syntax. Some implementations of `Gviz` are inspired by Ryan Davis's [Graph](https://github.com/seattlerb/graph 'seattlerb/graph').\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'gviz'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install gviz\r\n\r\n## Usage\r\n\r\nA simple example.\r\n\r\n    # add nodes and edges(route method)\r\n    # save to files with dot and png formats(save method)\r\n    require \"gviz\"\r\n    \r\n    Graph do\r\n      route :main => [:init, :parse, :cleanup, :printf]\r\n      route :init => :make, :parse => :execute\r\n      route :execute => [:make, :compare, :printf]\r\n\r\n      save(:sample1, :png)\r\n    end\r\n    \r\n`Graph` is a shortcut for `Gviz.new.graph`.\r\n\r\nThis outputs `sample1.dot` and `sample1.png` files shown as below.\r\n\r\n![sample1](http://github.com/melborne/Gviz/raw/master/examples/sample1.png)\r\n\r\n\r\n\r\nAdd some attributes to the graph, nodes, edges.\r\n\r\n    ## add color to all nodes with color set(nodes, nodeset and node methods)\r\n    ## add color & styles to all edges(edges method)\r\n    ## add color & styles to a edge(edge method)\r\n    ## add bgcolor to a graph(global method)\r\n    require \"gviz\"\r\n    \r\n    Graph do\r\n      route :main => [:init, :parse, :cleanup, :printf]\r\n      route :init => :make, :parse => :execute\r\n      route :execute => [:make, :compare, :printf]\r\n    \r\n      nodes(colorscheme:'piyg8', style:'filled')\r\n      nodeset.each.with_index(1) { |nd, i| node(nd.id, fillcolor:i) }\r\n      edges(arrowhead:'onormal', style:'bold', color:'magenta4')\r\n      edge(:main_printf, arrowtail:'diamond', dir:'both', color:'#3355FF')\r\n      global(bgcolor:'powderblue')\r\n\r\n      save(:sample2, :png)\r\n    end\r\n\r\nThis outputs below.\r\n\r\n![sample2](http://github.com/melborne/Gviz/raw/master/examples/sample2.png)\r\n\r\n\r\nModify some.\r\n\r\n    ## define specific edge port(node label & edge method)\r\n    ## adjust node positions(rank method)\r\n    ## define subgraph(subgraph method) \r\n    require \"gviz\"\r\n    \r\n    Graph do\r\n      route :main => [:init, :parse, :cleanup, :printf]\r\n      route :init => :make, :parse => :execute\r\n      route :execute => [:make, :compare, :printf]\r\n    \r\n      nodes colorscheme:'piyg8', style:'filled'\r\n      nodeset.each.with_index(1) { |nd, i| node nd.id, fillcolor:i }\r\n      edges arrowhead:'onormal', style:'bold', color:'magenta4'\r\n      edge :main_printf, arrowtail:'diamond', dir:'both', color:'#3355FF'\r\n      global bgcolor:'powderblue'\r\n    \r\n      node :execute, shape:'Mrecord', label:'{<x>execute | {a | b | c}}'\r\n      node :printf, shape:'Mrecord', label:'{printf |<y> format}'\r\n      edge 'execute:x_printf:y'\r\n      rank :same, :cleanup, :execute\r\n      subgraph do\r\n        global label:'SUB'\r\n        node :init\r\n        node :make\r\n      end\r\n\r\n      save(:sample3, :png)\r\n    end\r\n\r\nThis outputs below.\r\n\r\n![sample3](http://github.com/melborne/Gviz/raw/master/examples/sample3.png)\r\n\r\n## Use for Drawing\r\n\r\nGviz helps you easily to draw shapes on an exact position using shape-named methods.\r\n\r\n    require \"gviz\"\r\n\r\n    Graph do\r\n      line :a, from:[-100,0], to:[100,0]\r\n      line :b, from:[0,-100], to:[0,100]\r\n      circle :c\r\n      rect :d, x:50, y:50, fillcolor:\"green\", label:\"Rect\"\r\n      triangle :e, x:50, y:-50, fillcolor:\"cyan\"\r\n      diamond :f, x:-50, y:50, fillcolor:\"magenta\"\r\n      egg :g, x:-50, y:-50, fillcolor:\"yellow\", label:\"Egg\"\r\n\r\n      save :draw\r\n    end\r\n\r\nThis outputs below(consider a scale if save to output formats).\r\n\r\n![sample4](http://github.com/melborne/Gviz/raw/drawing/examples/sample4.png)\r\n\r\nAnother examples are at `examples` directory\r\n\r\n## gviz command\r\nIt comes with a `gviz` command. This works with a graph spec file. If 'graph.ru' file exist on a directory of the execution, it will be automatically loaded as a graph spec file.\r\n\r\nExample of graph.ru:\r\n\r\n      route :main => [:init, :parse, :cleanup, :printf]\r\n      route :init => :make, :parse => :execute\r\n      route :execute => [:make, :compare, :printf]\r\n\r\n      save(:sample, :png)\r\n\r\nUsage:\r\n\r\n      gviz build [FILE] [options]\r\n\r\nwhere [options] are:\r\n\r\n    --name,   -n :   Graph name (default: G)\r\n    --type,   -t :   Graph type (default: digraph)\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}