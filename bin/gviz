#!/usr/bin/env ruby
require "gviz"
require "trollop"

class OptionParser
  class << self
    def parse!
      opts = build_opts
      if man = opts[:man]
        print_manual(man)
      else
        draw_graph(opts)
      end
    end

    def build_opts
      Trollop::options do
        version "Gviz #{Gviz::VERSION} (c) 2012 kyoendo"
        banner ~<<-EOS
          Gviz is a tool for generating graphviz dot data with simple Ruby's syntax.
          It works with a graph spec file in which a graph spec describes with 
          several gviz commands. If 'graph.ru' file exist on a directory of the 
          execution, it will be automatically loaded as a graph spec file.

          Example of graph.ru:

                route :main => [:init, :parse, :cleanup, :printf]
                route :init => :make, :parse => :execute
                route :execute => [:make, :compare, :printf]

                save(:sample, :png)

          Usage:

                gviz [options] <graph filename>

          where [options] are:
          EOS

        opt :name, "Graph name", :default => 'G'
        opt :type, "Graph type", :default => 'digraph'
        opt :file, "Graph file", :default => 'graph.ru'
        opt :man, "Show Graphviz attributes (ex. node, shapes, color_names)", :type => :string
      end
    end

    def draw_graph(opts)
      Graph(opts[:name], opts[:type]) { instance_eval ::File.read(opts[:file]) }
    rescue Errno::ENOENT
      abort "graph file `#{opts[:file]}` not found"
    end

    def print_manual(man)
      attrs = %w(graph node edge subgraph cluster)
      consts = %w(color_names color_schemes full_color_names
                  full_color_schemes arrows shapes output_formats)
      man_man = ~<<-EOS
        \e[35m--man(-m) accepts any of them:\e[0m
          graph, node, edge, subgraph, cluster,
          arrows, shapes, output_formats
          color_names, color_schemes,
          full_color_names, full_color_schemes,
        EOS

      res =
        case man.downcase
        when 'man'
          man_man
        when *attrs
          format_attrs(man)
        when *consts
          ["\e[35m#{man.capitalize.gsub('_', ' ')}:\e[0m"] +
          Gviz.const_get(man.upcase).join_by(", ", 70).map { |l| "  " + l }
        else
          "Error: unknown subcommand '#{man}' for --man\n" + man_man
        end
      puts res
    end

    def format_attrs(target)
      header = ["\e[35m#{target.capitalize} attributes (type|default|minimum|notes):\e[0m"]
      attrs = Gviz.ATTR(target).map { |attr, desc| "  #{attr} (#{desc.join(" | ")})" }
      [header] + attrs
    end
  end
  private_class_method :build_opts, :draw_graph, :print_manual, :format_attrs
end

OptionParser.parse!
